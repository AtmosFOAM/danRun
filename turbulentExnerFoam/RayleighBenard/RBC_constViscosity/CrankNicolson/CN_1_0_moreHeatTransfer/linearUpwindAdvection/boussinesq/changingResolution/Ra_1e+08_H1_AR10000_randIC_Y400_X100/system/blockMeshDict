/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.4                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;

    root            "";
    case            "";
    instance        "";
    local           "";

    class           dictionary;
    object          blockMeshDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices
(
    ( 0             0.02    0)         // 0
    ( 10081.08625   0.02    0)         // 1
    ( 10081.08625   0.02    1)         // 2
    ( 0             0.02    1)         // 3
    ( 0             0       0)         // 4
    ( 10081.08625   0       0)         // 5
    ( 10081.08625   0       1)         // 6
    ( 0             0       1)         // 7
);
// Critical wavenumber from Jeng & Hassard (1999), "The critical wave number for the planar Benard problem is unique"
// 1 x crit. wavelength = 2.01621725 (10 s.f.)
// 5 x crit. wavelength = 10.08108625 (10 s.f.)

blocks
(
    hex (0 1 2 3 4 5 6 7) (100 400 1) simpleGrading (1 1 1)
);
// highest resolution in reference runs is 400 x 800

edges
(
);

boundary
(
    ground
    {
        type wall;
        faces
        (
            (1 5 4 0)
        );
    }
    top
    {
        type wall;
        faces
        (
            (3 7 6 2)
        );
    }
    left
    {
        type cyclic;
        neighbourPatch right;
        faces
        (
            (0 4 7 3)
        );
    }
    right
    {
        type cyclic;
        neighbourPatch left;
        faces
        (
            (1 5 6 2)
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
            (0 3 2 1)
            (4 5 6 7)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
